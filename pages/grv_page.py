import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import json
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('.')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from grv_camera import display_grv_interface, GRVCamera
from chakra_visualization import create_chakra_visualization
from chakra_visualization_3d import create_chakra_visualization_3d
from aura_photo import capture_aura_photo
from assets.chakra_info import chakra_data, app_text

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="GRV AURA STUDIO",
    page_icon="üîÆ",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'About': """
        ### GRV AURA STUDIO
        **–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –ù–ò–¶ –ò–Ω–∏—Ü–∏–æ–ª–æ–≥–∏–∏ –∏ —Ç—Ä–∞–Ω—Å–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏**
        
        Streamlit v1.43.1
        """
    }
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'language' not in st.session_state:
    st.session_state.language = 'ru'  # Default to Russian
    
if 'view_mode' not in st.session_state:
    st.session_state.view_mode = '2d'  # Default to 2D view

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
def get_text(key):
    return app_text[st.session_state.language][key]
    
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π CSS
with open('styles.css') as f:
    css_content = f.read()
    
# –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω CSS –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–º–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
additional_css = """
<style>
/* Force dark theme for dropdowns and other elements */
div[data-baseweb="select"], 
div[data-baseweb="popover"],
div[data-baseweb="menu"],
div[role="listbox"],
ul[role="listbox"],
li[role="option"] {
    background-color: #14142B !important;
    color: #E0E0E0 !important;
}

/* Override any inline styles that might use white backgrounds */
[style*="background-color: rgb(255, 255, 255)"],
[style*="background-color:#fff"],
[style*="background-color: #ffffff"],
[style*="background: white"],
[style*="background:white"] {
    background-color: #0E0E20 !important;
}

/* Header area fix */
header[data-testid="stHeader"] {
    background-color: #0E0E20 !important;
}
</style>
"""

# –ü—Ä–∏–º–µ–Ω—è–µ–º CSS
st.markdown(f'<style>{css_content}</style>{additional_css}', unsafe_allow_html=True)

# Hide default Streamlit menu items and footer with custom CSS and JS
hide_streamlit_elements = """
<style>
#MainMenu {visibility: hidden;}
footer {visibility: hidden;}
.stSidebar ul[role="listbox"] {display: none !important;}
.stSidebar div[data-testid="stSidebarNav"] {display: none !important;}
.stSidebar div.css-1d391kg {display: none !important;}
.stSidebar div.css-1k8s0as {display: none !important;}
</style>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Hide all sidebar navigation elements that contain 'Main' or 'GRV Page'
    setTimeout(function() {
        document.querySelectorAll('section[data-testid="stSidebar"] a, section[data-testid="stSidebar"] button, section[data-testid="stSidebar"] [role="listbox"] [role="option"]').forEach(function(el) {
            if (el.textContent.includes('Main') || el.textContent.includes('GRV') || el.textContent.includes('Grv')) {
                el.style.display = 'none';
                if (el.parentElement) el.parentElement.style.display = 'none';
            }
        });
    }, 500);
});
</script>
"""
st.markdown(hide_streamlit_elements, unsafe_allow_html=True)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    # –õ–æ–≥–æ—Ç–∏–ø
    st.image("assets/images/logo/logo.png", width=150)
    
    # Navigation buttons
    st.title("üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è / Navigation")
    st.markdown("""
    <a href="/" target="_self" style="text-decoration: none;">
        <div style="background-color: #4CAF50; color: white; padding: 10px; text-align: center; border-radius: 5px; margin-bottom: 10px;">
            –ë–∏–æ—Ä–µ–∑–æ–Ω–∞–Ω—Å –∫–æ–º–ø–ª–µ–∫—Å
        </div>
    </a>
    <a href="/grv_page" target="_self" style="text-decoration: none;">
        <div style="background-color: #2196F3; color: white; padding: 10px; text-align: center; border-radius: 5px; margin-bottom: 20px;">
            –ì–†–í –∫–æ–º–ø–ª–µ–∫—Å
        </div>
    </a>
    """, unsafe_allow_html=True)

    st.title("üåç Language / –Ø–∑—ã–∫")
    lang_option = st.radio(
        "Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        options=["–†—É—Å—Å–∫–∏–π", "English"],
        index=0 if st.session_state.language == 'ru' else 1,
        horizontal=True
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞
    if lang_option == "English" and st.session_state.language != 'en':
        st.session_state.language = 'en'
        st.rerun()
    elif lang_option == "–†—É—Å—Å–∫–∏–π" and st.session_state.language != 'ru':
        st.session_state.language = 'ru'
        st.rerun()
        
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Ä–µ–∂–∏–º–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    st.title("üîÑ " + get_text("view_mode"))
    view_mode = st.radio(
        label=get_text("view_mode"),
        options=[get_text("view_2d"), get_text("view_3d")],
        index=0 if st.session_state.view_mode == '2d' else 1,
        horizontal=True,
        label_visibility="collapsed"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    new_mode = '2d' if view_mode == get_text("view_2d") else '3d'
    if st.session_state.view_mode != new_mode:
        st.session_state.view_mode = new_mode
        st.rerun()
    
    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è 3D —Ä–µ–∂–∏–º–∞
    if st.session_state.view_mode == '3d':
        st.info(get_text("view_3d_help"))

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title("GRV AURA STUDIO")
st.markdown("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≥–∞–∑–æ—Ä–∞–∑—Ä—è–¥–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–ì–†–í) –∏ –∞–Ω–∞–ª–∏–∑–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—è —á–µ–ª–æ–≤–µ–∫–∞")

# –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
st.header(get_text("client_info_header"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
if 'client_info' not in st.session_state:
    st.session_state.client_info = {
        'fullname': '',
        'birthdate': None,
        'phone': '',
        'email': ''
    }

# –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
col1, col2 = st.columns(2)

with col1:
    # –§–ò–û
    fullname = st.text_input(
        get_text("fullname"),
        value=st.session_state.client_info['fullname']
    )
    st.session_state.client_info['fullname'] = fullname
    
    # –¢–µ–ª–µ—Ñ–æ–Ω
    phone = st.text_input(
        get_text("phone"),
        value=st.session_state.client_info['phone']
    )
    st.session_state.client_info['phone'] = phone

with col2:
    # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
    birthdate = st.date_input(
        get_text("birthdate"),
        value=st.session_state.client_info['birthdate'] if st.session_state.client_info['birthdate'] else None
    )
    st.session_state.client_info['birthdate'] = birthdate
    
    # Email
    email = st.text_input(
        get_text("email"),
        value=st.session_state.client_info['email']
    )
    st.session_state.client_info['email'] = email

# –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
save_col1, save_col2 = st.columns([1, 3])
with save_col1:
    if st.button(get_text("save_client"), type="primary"):
        st.success(f"{get_text('fullname')}: {st.session_state.client_info['fullname']}\n"
                 f"{get_text('birthdate')}: {st.session_state.client_info['birthdate']}\n"
                 f"{get_text('phone')}: {st.session_state.client_info['phone']}\n"
                 f"{get_text('email')}: {st.session_state.client_info['email']}")

# –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
st.markdown("---")

# –ì–†–í-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.header(get_text("grv_tab_header"))
st.markdown(get_text("grv_tab_info"))

# –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ì–†–í-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
display_grv_interface(st.session_state.language)

# –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ì–†–í-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
if 'chakra_values_from_grv' in st.session_state:
    st.markdown("---")
    st.header(get_text("visual_header"))
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ - –ª–µ–≤–∞—è –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ø—Ä–∞–≤–∞—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    grv_col1, grv_col2 = st.columns([1, 2])
    
    with grv_col1:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –ì–†–í-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        st.success(f"{get_text('grv_analysis_results')}", icon="‚úÖ")
        
        # –ë–∞–ª–∞–Ω—Å —á–∞–∫—Ä (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if 'balance_index' in st.session_state:
            balance = st.session_state.balance_index
            st.metric("–ò–Ω–¥–µ–∫—Å —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞", f"{balance:.1f}%")
            
            # –û—Ü–µ–Ω–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            if balance > 80:
                st.success("–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≥–∞—Ä–º–æ–Ω–∏–∑–∞—Ü–∏–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤")
            elif balance > 60:
                st.info("–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –≥–∞—Ä–º–æ–Ω–∏–∑–∞—Ü–∏–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤")
            elif balance > 40:
                st.warning("–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–µ–Ω—å –≥–∞—Ä–º–æ–Ω–∏–∑–∞—Ü–∏–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤")
            else:
                st.error("–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≥–∞—Ä–º–æ–Ω–∏–∑–∞—Ü–∏–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ —á–∞–∫—Ä –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
        st.markdown("### " + get_text("chakra_energy_values"))
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —á–∞–∫—Ä –∏–∑ –ì–†–í-—Å–µ—Å—Å–∏–∏
        chakra_values = st.session_state.chakra_values_from_grv
        
        for chakra in chakra_data:
            chakra_name = chakra['name']
            chakra_name_display = chakra['name_ru'] if st.session_state.language == 'ru' else chakra['name']
            sanskrit_name_display = chakra['sanskrit_name_ru'] if st.session_state.language == 'ru' else chakra['sanskrit_name']
            color_hex = chakra['color_hex']
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è —ç—Ç–æ–π —á–∞–∫—Ä—ã
            energy_value = chakra_values.get(chakra_name, 0)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü —Ü–≤–µ—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —á–∞–∫—Ä—ã –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º —ç–Ω–µ—Ä–≥–∏–∏
            st.markdown(
                f"<div style='display: flex; align-items: center; margin-bottom: 10px;'>"
                f"<div style='background-color: {color_hex}; width: 20px; height: 20px; border-radius: 50%; margin-right: 10px;'></div>"
                f"<span><b>{chakra_name_display}</b> ({sanskrit_name_display}): <b>{energy_value:.1f}%</b></span>"
                f"</div>",
                unsafe_allow_html=True
            )
    
    with grv_col2:
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —á–∞–∫—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        if st.session_state.view_mode == '2d':
            fig = create_chakra_visualization(chakra_values, st.session_state.language)
            st.pyplot(fig)
        else:  # 3D mode
            fig_3d = create_chakra_visualization_3d(chakra_values, st.session_state.language)
            st.plotly_chart(fig_3d, use_container_width=True, height=700)
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ —Å –∞—É—Ä–æ–π
        if st.button("üì∏ " + (
                "–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –∞—É—Ä—ã" if st.session_state.language == 'ru' else "Take Aura Photo"
            )):
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Ä–µ–∂–∏–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            st.session_state.aura_photo_mode = True
            st.rerun()

# –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∞—É—Ä–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ–æ—Ç–æ
if 'aura_photo_mode' in st.session_state and st.session_state.aura_photo_mode:
    st.markdown("---")  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ì–†–í –∫–∞–º–µ—Ä—ã –¥–ª—è —Ñ–æ—Ç–æ –∞—É—Ä—ã
    if 'chakra_values_from_grv' in st.session_state:
        st.success("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –ì–†–í-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—É—Ä—ã" if st.session_state.language == 'ru' else 
                  "Using GRV scanning data to create aura")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ì–†–í –¥–ª—è —Ñ–æ—Ç–æ –∞—É—Ä—ã
        grv_energy_values = {k: float(v) for k, v in st.session_state.chakra_values_from_grv.items()}
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ì–†–í, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤–ª–∏—è–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        st.session_state.grv_aura_values = grv_energy_values
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ
        st.sidebar.markdown("### GRV Chakra Energy Values")
        for chakra_name, energy_value in grv_energy_values.items():
            st.sidebar.text(f"{chakra_name}: {energy_value}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —á–∞–∫—Ä –∏–∑ –ì–†–í –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
        capture_aura_photo(st.session_state.grv_aura_values, st.session_state.language)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ì–†–í, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        st.warning("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ì–†–í-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –∞—É—Ä—ã", icon="‚ö†Ô∏è")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—É
    if st.button("‚Ü©Ô∏è " + (
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—É" if st.session_state.language == 'ru' else "Return to main mode"
        )):
        st.session_state.aura_photo_mode = False
        st.rerun()