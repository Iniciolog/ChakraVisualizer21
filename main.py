import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from chakra_visualization import create_chakra_visualization
from chakra_visualization_3d import create_chakra_visualization_3d
from assets.chakra_info import chakra_data, app_text
import utils
from diagnostic_analyzer import DiagnosticReportAnalyzer
from organs_visualization import OrgansVisualizer
from organ_detail_visualization import OrganDetailVisualizer
from aura_photo import capture_aura_photo

# Initialize session state for language and view mode
if 'language' not in st.session_state:
    st.session_state.language = 'ru'  # Default to Russian
    
if 'view_mode' not in st.session_state:
    st.session_state.view_mode = '2d'  # Default to 2D view
    
# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∂–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
if 'energy_profile' not in st.session_state:
    st.session_state.energy_profile = 'custom'  # Default: custom profile
    
# Initialize session state variables
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è —á–∞–∫—Ä –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
if 'energy_values' not in st.session_state:
    st.session_state.energy_values = {chakra['name']: 100 for chakra in chakra_data}

if 'report_processed' not in st.session_state:
    st.session_state.report_processed = False
    
if 'report_analysis' not in st.session_state:
    st.session_state.report_analysis = None

# –§–ª–∞–≥ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫
if 'initial_load_done' not in st.session_state:
    st.session_state.initial_load_done = False

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö —á–∞–∫—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
if 'chakra_data_source' not in st.session_state:
    st.session_state.chakra_data_source = "default"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Ö
# –í–ê–ñ–ù–û: –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ü–û–°–õ–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ st.session_state.energy_values,
# –Ω–æ –î–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è energy_values –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª–∏ –ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
values_applied = False

# –ò—Å—Ç–æ—á–Ω–∏–∫ 1: –ê–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
if 'report_processed' in st.session_state and st.session_state.report_processed and 'report_analysis' in st.session_state and st.session_state.report_analysis and 'chakra_energy' in st.session_state.report_analysis:
    values_applied = True
    print("–ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ —á–∞–∫—Ä –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
    st.session_state.chakra_data_source = "report"
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –æ—Ç—á–µ—Ç–∞
    report_values = {}
    for chakra_name, energy_value in st.session_state.report_analysis['chakra_energy'].items():
        try:
            report_values[chakra_name] = float(energy_value)
            print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞–∫—Ä—ã {chakra_name}: {energy_value}")
        except (ValueError, TypeError):
            report_values[chakra_name] = 100.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —á–∞–∫—Ä—ã {chakra_name}: {energy_value}, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100.0")
    
    # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –∑–∞–º–µ–Ω—è–µ–º –∏–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if report_values:
        st.session_state.energy_values.update(report_values)
    
# –ò—Å—Ç–æ—á–Ω–∏–∫ 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (apply_results) –µ—Å–ª–∏ –æ—Ç—á–µ—Ç –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
elif not values_applied and 'apply_results' in st.session_state and st.session_state.apply_results and 'chakra_energy' in st.session_state.apply_results:
    values_applied = True
    print("–ü–†–ò–û–†–ò–¢–ï–¢ 3: –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    st.session_state.chakra_data_source = "temp_results"
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    temp_values = {}
    for chakra_name, energy_value in st.session_state.apply_results['chakra_energy'].items():
        try:
            temp_values[chakra_name] = float(energy_value)
            print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞–∫—Ä—ã {chakra_name}: {energy_value}")
        except (ValueError, TypeError):
            temp_values[chakra_name] = 100.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            print(f"–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —á–∞–∫—Ä—ã {chakra_name}: {energy_value}, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100.0")
    
    # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –∑–∞–º–µ–Ω—è–µ–º –∏–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if temp_values:
        st.session_state.energy_values.update(temp_values)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    st.session_state.apply_results = None
    
# –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞
st.session_state.initial_load_done = True
    
# Callback –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
def apply_report_results():
    if st.session_state.report_analysis and 'chakra_energy' in st.session_state.report_analysis:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ —á–∞–∫—Ä –≤ session_state
        for chakra_name, energy_value in st.session_state.report_analysis['chakra_energy'].items():
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞
            st.session_state.energy_values[chakra_name] = int(energy_value)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        st.session_state.visualization_updated = True

# Get text based on selected language
def get_text(key):
    return app_text[st.session_state.language][key]

# Set page configuration
st.set_page_config(
    page_title=get_text("page_title"),
    page_icon="üßò",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'About': """
        ### AURA STUDIO
        **–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –ù–ò–¶ –ò–Ω–∏—Ü–∏–æ–ª–æ–≥–∏–∏ –∏ —Ç—Ä–∞–Ω—Å–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏**
        
        Streamlit v1.43.1
        """
    }
)

# Custom CSS
with open('styles.css') as f:
    css_content = f.read()
    
# Add inline CSS for critical elements that need dark theming
additional_css = """
<style>
/* Force dark theme for dropdowns and other elements */
div[data-baseweb="select"], 
div[data-baseweb="popover"],
div[data-baseweb="menu"],
div[role="listbox"],
ul[role="listbox"],
li[role="option"] {
    background-color: #14142B !important;
    color: #E0E0E0 !important;
}

/* Override any inline styles that might use white backgrounds */
[style*="background-color: rgb(255, 255, 255)"],
[style*="background-color:#fff"],
[style*="background-color: #ffffff"],
[style*="background: white"],
[style*="background:white"] {
    background-color: #0E0E20 !important;
}

/* Header area fix */
header[data-testid="stHeader"] {
    background-color: #0E0E20 !important;
}
</style>
"""

# Apply both the CSS file styles and additional inline styles
st.markdown(f'<style>{css_content}</style>{additional_css}', unsafe_allow_html=True)

# Language selector in sidebar
with st.sidebar:
    st.title("üåç Language / –Ø–∑—ã–∫")
    lang_option = st.radio(
        "Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        options=["–†—É—Å—Å–∫–∏–π", "English"],
        index=0 if st.session_state.language == 'ru' else 1,
        horizontal=True
    )
    
    # Update language based on selection
    if lang_option == "English" and st.session_state.language != 'en':
        st.session_state.language = 'en'
        st.rerun()
    elif lang_option == "–†—É—Å—Å–∫–∏–π" and st.session_state.language != 'ru':
        st.session_state.language = 'ru'
        st.rerun()
        
    # Add visualization mode selector
    st.title("üîÑ " + get_text("view_mode"))
    view_mode = st.radio(
        label=get_text("view_mode"),
        options=[get_text("view_2d"), get_text("view_3d")],
        index=0 if st.session_state.view_mode == '2d' else 1,
        horizontal=True,
        label_visibility="collapsed"
    )
    
    # Update view mode
    new_mode = '2d' if view_mode == get_text("view_2d") else '3d'
    if st.session_state.view_mode != new_mode:
        st.session_state.view_mode = new_mode
        st.rerun()
    
    # Help text for 3D mode
    if st.session_state.view_mode == '3d':
        st.info(get_text("view_3d_help"))

# Page title and introduction
st.title(get_text("app_title"))
st.markdown(get_text("app_intro"))

# Client information form
st.header(get_text("client_info_header"))

# Initialize session state for client info
if 'client_info' not in st.session_state:
    st.session_state.client_info = {
        'fullname': '',
        'birthdate': None,
        'phone': '',
        'email': ''
    }

# Create two columns for client info
col1, col2 = st.columns(2)

with col1:
    # –§–ò–û
    fullname = st.text_input(
        get_text("fullname"),
        value=st.session_state.client_info['fullname']
    )
    st.session_state.client_info['fullname'] = fullname
    
    # –¢–µ–ª–µ—Ñ–æ–Ω
    phone = st.text_input(
        get_text("phone"),
        value=st.session_state.client_info['phone']
    )
    st.session_state.client_info['phone'] = phone

with col2:
    # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
    birthdate = st.date_input(
        get_text("birthdate"),
        value=st.session_state.client_info['birthdate'] if st.session_state.client_info['birthdate'] else None
    )
    st.session_state.client_info['birthdate'] = birthdate
    
    # Email
    email = st.text_input(
        get_text("email"),
        value=st.session_state.client_info['email']
    )
    st.session_state.client_info['email'] = email

# Add save button
save_col1, save_col2 = st.columns([1, 3])
with save_col1:
    if st.button(get_text("save_client"), type="primary"):
        st.success(f"{get_text('fullname')}: {st.session_state.client_info['fullname']}\n"
                 f"{get_text('birthdate')}: {st.session_state.client_info['birthdate']}\n"
                 f"{get_text('phone')}: {st.session_state.client_info['phone']}\n"
                 f"{get_text('email')}: {st.session_state.client_info['email']}")

# Report upload section
st.header(get_text("report_upload_header"))
st.markdown(get_text("report_upload_info"))

# Create two columns for the report upload functionality
upload_col1, upload_col2 = st.columns([1, 2])

with upload_col1:
    # File uploader for diagnostic report
    uploaded_file = st.file_uploader(
        get_text("upload_button"), 
        type="pdf",
        key="diagnostic_report"
    )
    
    # If a file was uploaded
    if uploaded_file is not None and not st.session_state.report_processed:
        # Show processing message
        with st.spinner(get_text("analyzing_report")):
            # Create an analyzer instance
            analyzer = DiagnosticReportAnalyzer()
            
            # Process the report
            analysis_results = analyzer.analyze_report(uploaded_file)
            
            if 'error' in analysis_results:
                st.error(f"{get_text('report_error')}: {analysis_results['error']}")
            else:
                # Store analysis results in session state
                st.session_state.report_analysis = analysis_results
                st.session_state.report_processed = True
                
                # Fill client info if available
                if 'client_info' in analysis_results and analysis_results['client_info'].get('fullname'):
                    st.session_state.client_info['fullname'] = analysis_results['client_info'].get('fullname', '')
                
                # Update success message
                st.success(get_text("report_processed"))
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —ç–Ω–µ—Ä–≥–∏–∏ —á–∞–∫—Ä
                if 'visualization_updated' not in st.session_state:
                    st.session_state.visualization_updated = False
                
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
                def update_chakra_values():
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                    temp_results = analysis_results.copy()
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    st.session_state.apply_results = temp_results
                    st.session_state.visualization_updated = True
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.button(
                    get_text("apply_report_results"), 
                    type="primary",
                    on_click=update_chakra_values
                )

with upload_col2:
    # Display analysis results if available
    if st.session_state.report_processed and st.session_state.report_analysis:
        analysis = st.session_state.report_analysis
        
        st.subheader(get_text("report_analysis_header"))
        
        # Display client info
        if 'client_info' in analysis:
            st.write(f"**{get_text('report_info')}:**")
            for key, value in analysis['client_info'].items():
                if key == 'fullname':
                    label = get_text('fullname')
                elif key == 'age':
                    label = get_text('birthdate')
                else:
                    label = key.replace('_', ' ').capitalize()
                st.write(f"- {label}: {value}")
        
        # Display diagnostic data in a table
        if 'diagnostic_data' in analysis and analysis['diagnostic_data']:
            st.write(f"**{get_text('diagnostic_results')}:**")
            
            # Create a DataFrame for diagnostic data
            import pandas as pd
            diagnostic_data = []
            
            for param, data in analysis['diagnostic_data'].items():
                status_text = get_text('normal') if data.get('status') == 'normal' else get_text('abnormal')
                min_norm, max_norm = data.get('normal_range', (0, 0))
                
                diagnostic_data.append({
                    get_text('parameter'): param,
                    get_text('measured_value'): data.get('result', 0),
                    get_text('normal_range'): f"{min_norm} - {max_norm}",
                    get_text('status'): status_text
                })
            
            # Create and display the DataFrame
            df = pd.DataFrame(diagnostic_data)
            st.dataframe(df, use_container_width=True)
        
        # Display chakra impact analysis
        if 'chakra_energy' in analysis:
            st.write(f"**{get_text('chakra_impact')}:**")
            st.write(get_text('estimated_impact'))
            
            # Display chakra energy values
            for chakra_name, energy_value in analysis['chakra_energy'].items():
                chakra_name_display = next((c['name_ru'] if st.session_state.language == 'ru' else c['name'] 
                                          for c in chakra_data if c['name'] == chakra_name), chakra_name)
                
                # Get color for this chakra
                chakra_color = next((c['color_hex'] for c in chakra_data if c['name'] == chakra_name), "#CCCCCC")
                
                # Create a colored dot with the chakra name and energy level
                st.markdown(
                    f"<div style='display: flex; align-items: center;'>"
                    f"<div style='background-color: {chakra_color}; width: 15px; height: 15px; border-radius: 50%; margin-right: 10px;'></div>"
                    f"<span><b>{chakra_name_display}</b>: {energy_value:.1f}%</span>"
                    f"</div>",
                    unsafe_allow_html=True
                )
        
        # –£–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä—É—á–Ω–æ–º—É —Ä–µ–∂–∏–º—É, –ø–æ—Å–∫–æ–ª—å–∫—É –µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ—Ç

# Divider
st.markdown("---")

# Create two columns for main layout
col1, col2 = st.columns([1, 2])

with col1:
    st.header(get_text("param_header"))
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ —á–∞–∫—Ä—ã –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è
    for chakra in chakra_data:
        if chakra['name'] not in st.session_state.energy_values:
            st.session_state.energy_values[chakra['name']] = 100
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–∞–Ω–¥–µ—Ä —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    with st.expander(get_text("energy_profiles")):
        st.caption(get_text("energy_profile_description"))
        
        # –ü—Ä–æ—Ñ–∏–ª–∏ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        energy_profiles = {
            "custom": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π",
            "all_100": "–í—Å–µ —á–∞–∫—Ä—ã 100%",
            "all_50": "–í—Å–µ —á–∞–∫—Ä—ã 50%",
            "linear_up": "–†–æ—Å—Ç —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö",
            "linear_down": "–£–±—ã–≤–∞–Ω–∏–µ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑",
            "alternating": "–ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π",
            "low_energy": "–ù–∏–∑–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è",
            "high_energy": "–í—ã—Å–æ–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è",
            "imbalanced": "–î–∏—Å–±–∞–ª–∞–Ω—Å —ç–Ω–µ—Ä–≥–∏–π"
        }
        
        selected_profile = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —ç–Ω–µ—Ä–≥–∏–∏:",
            options=list(energy_profiles.keys()),
            format_func=lambda x: energy_profiles[x],
            index=list(energy_profiles.keys()).index(st.session_state.energy_profile) if st.session_state.energy_profile in energy_profiles else 0
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        if selected_profile != st.session_state.energy_profile:
            st.session_state.energy_profile = selected_profile
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º —ç–Ω–µ—Ä–≥–∏–∏
            if selected_profile == "all_100":
                for chakra in chakra_data:
                    st.session_state.energy_values[chakra['name']] = 100
            elif selected_profile == "all_50":
                for chakra in chakra_data:
                    st.session_state.energy_values[chakra['name']] = 50
            elif selected_profile == "linear_up":
                chakra_names = [c['name'] for c in chakra_data]
                for i, chakra_name in enumerate(chakra_names):
                    # –û—Ç 30% –¥–æ 90%
                    energy = 30 + 60 * i / (len(chakra_names) - 1)
                    st.session_state.energy_values[chakra_name] = energy
            elif selected_profile == "linear_down":
                chakra_names = [c['name'] for c in chakra_data]
                for i, chakra_name in enumerate(chakra_names):
                    # –û—Ç 90% –¥–æ 30%
                    energy = 90 - 60 * i / (len(chakra_names) - 1)
                    st.session_state.energy_values[chakra_name] = energy
            elif selected_profile == "alternating":
                chakra_names = [c['name'] for c in chakra_data]
                for i, chakra_name in enumerate(chakra_names):
                    energy = 40 if i % 2 == 0 else 80
                    st.session_state.energy_values[chakra_name] = energy
            elif selected_profile == "low_energy":
                for chakra in chakra_data:
                    # –û—Ç 10% –¥–æ 30%
                    st.session_state.energy_values[chakra['name']] = 10 + 20 * (chakra_data.index(chakra) / (len(chakra_data) - 1))
            elif selected_profile == "high_energy":
                for chakra in chakra_data:
                    # –û—Ç 70% –¥–æ 90%
                    st.session_state.energy_values[chakra['name']] = 70 + 20 * (chakra_data.index(chakra) / (len(chakra_data) - 1))
            elif selected_profile == "imbalanced":
                energy_map = {
                    "Root": 85,
                    "Sacral": 40,
                    "Solar Plexus": 70,
                    "Heart": 30,
                    "Throat": 90,
                    "Third Eye": 50, 
                    "Crown": 60
                }
                for chakra_name, energy in energy_map.items():
                    st.session_state.energy_values[chakra_name] = energy
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            st.rerun()
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö
    if st.session_state.chakra_data_source == "report":
        st.success(get_text("diagnostic_data_used"), icon="üìã")
        st.markdown(get_text("chakra_values_auto_calculated"))
    elif st.session_state.chakra_data_source == "temp_results":
        st.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞" if st.session_state.language == 'ru' else
                "Using temporary analysis results", icon="üîÑ")
    else:
        # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        st.warning(get_text("no_diagnostic_data"), icon="‚ö†Ô∏è")
        st.markdown(get_text("please_upload_report"))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ —á–∞–∫—Ä –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
    st.markdown("### " + get_text("chakra_energy_values"))
    
    for chakra in chakra_data:
        chakra_name = chakra['name']
        chakra_name_display = chakra['name_ru'] if st.session_state.language == 'ru' else chakra['name']
        sanskrit_name_display = chakra['sanskrit_name_ru'] if st.session_state.language == 'ru' else chakra['sanskrit_name']
        color_hex = chakra['color_hex']
        
        # Display a color sample with the chakra name and energy value
        st.markdown(
            f"<div style='display: flex; align-items: center; margin-bottom: 10px;'>"
            f"<div style='background-color: {color_hex}; width: 20px; height: 20px; border-radius: 50%; margin-right: 10px;'></div>"
            f"<span><b>{chakra_name_display}</b> ({sanskrit_name_display}): <b>{st.session_state.energy_values[chakra_name]}%</b></span>"
            f"</div>",
            unsafe_allow_html=True
        )

with col2:
    st.header(get_text("visual_header"))
    
    # Create the chakra visualization based on current energy values and view mode
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –ø–æ—Å–º–æ—Ç—Ä–∏–º –∑–Ω–∞—á–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ —á–∞–∫—Ä
    st.sidebar.markdown("### Debug: Chakra Energy Values")
    for chakra_name, energy_value in st.session_state.energy_values.items():
        st.sidebar.text(f"{chakra_name}: {energy_value}")
    
    if st.session_state.view_mode == '2d':
        fig = create_chakra_visualization(st.session_state.energy_values, st.session_state.language)
        st.pyplot(fig)
    else:  # 3D mode
        fig_3d = create_chakra_visualization_3d(st.session_state.energy_values, st.session_state.language)
        st.plotly_chart(fig_3d, use_container_width=True, height=700)
        
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ —Å –∞—É—Ä–æ–π, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
    if st.session_state.report_processed and st.session_state.report_analysis and 'chakra_energy' in st.session_state.report_analysis:
        if st.button("üì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –∞—É—Ä—ã" if st.session_state.language == 'ru' else "üì∏ Take Aura Photo"):
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Ä–µ–∂–∏–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            st.session_state.aura_photo_mode = True
            st.rerun()
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏
        st.warning(get_text("no_report_for_aura"), icon="‚ö†Ô∏è")
        
# –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∞—É—Ä–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ–æ—Ç–æ
if 'aura_photo_mode' in st.session_state and st.session_state.aura_photo_mode:
    st.markdown("---")  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç—á–µ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    if 'report_processed' in st.session_state and st.session_state.report_processed:
        # –ï—Å–ª–∏ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç, –±–µ—Ä–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if 'report_analysis' in st.session_state and st.session_state.report_analysis and 'chakra_energy' in st.session_state.report_analysis:
            st.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—É—Ä—ã" if st.session_state.language == 'ru' else 
                   "Using diagnostic report data to create aura")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ—Ç—á–µ—Ç–∞
            report_energy_values = st.session_state.report_analysis['chakra_energy']
            energy_values_float = {k: float(v) for k, v in report_energy_values.items()}
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∞—É—Ä—ã
            st.session_state.energy_values_aura = energy_values_float
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            st.sidebar.markdown("### Report Chakra Energy Values")
            for chakra_name, energy_value in energy_values_float.items():
                st.sidebar.text(f"{chakra_name}: {energy_value}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–∞–∫—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
            capture_aura_photo(st.session_state.energy_values_aura, st.session_state.language)
        else:
            # –ï—Å–ª–∏ –≤ –æ—Ç—á–µ—Ç–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —á–∞–∫—Ä–∞—Ö
            st.error(get_text("no_chakra_data_in_report"))
    else:
        # –ï—Å–ª–∏ –æ—Ç—á–µ—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
        st.warning(get_text("no_report_for_aura"), icon="‚ö†Ô∏è")
        st.info(get_text("please_upload_report_for_aura"))
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—É
    if st.button("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—É" if st.session_state.language == 'ru' else "‚Ü©Ô∏è Return to main mode"):
        st.session_state.aura_photo_mode = False
        st.rerun()

# –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –¥–ª—è –æ—Ä–≥–∞–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
if st.session_state.report_processed and st.session_state.report_analysis:
    st.header(get_text("organ_visualization_tab"))
    st.markdown(get_text("organ_visualization_info"))
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏: –æ–¥–Ω–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏, –¥—Ä—É–≥–∞—è –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥—É—é –ø—Ä–æ–ø–æ—Ä—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 
    organ_col1, organ_col2 = st.columns([2, 1])
    
    with organ_col1:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Ä–≥–∞–Ω–æ–≤
        if 'diagnostic_data' in st.session_state.report_analysis:
            organ_visualizer = OrgansVisualizer(st.session_state.language)
            diagnostic_data = st.session_state.report_analysis['diagnostic_data']
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –æ—Ä–≥–∞–Ω–æ–≤
            organ_fig = organ_visualizer.create_organs_visualization(diagnostic_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤ session_state, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if 'organ_visualizer' not in st.session_state:
                st.session_state.organ_visualizer = organ_visualizer
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–≥–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–¥–µ–ª–µ–Ω –Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏)
            if 'highlighted_organ' not in st.session_state:
                st.session_state.highlighted_organ = None
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å –ø–æ–¥–ø–∏—Å—è–º–∏
            st.pyplot(organ_fig)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –æ—Ä–≥–∞–Ω–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
            st.markdown(f"### {get_text('select_organ')}:")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (–≤—ã–±–æ—Ä –æ—Ä–≥–∞–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞)
            if 'selected_organ' not in st.session_state:
                st.session_state.selected_organ = None
                
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
            organ_names = list(organ_visualizer.organs_positions.keys())
            organ_names_localized = organ_names  # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞–∑–≤–∞–Ω–∏–π –æ—Ä–≥–∞–Ω–æ–≤
            
            # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ä–≥–∞–Ω–∞
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            default_index = 0
            if st.session_state.selected_organ in organ_names_localized:
                default_index = organ_names_localized.index(st.session_state.selected_organ)
            
            # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –æ—Ä–≥–∞–Ω–∞
            def on_organ_change():
                st.session_state.selected_organ = st.session_state.organ_selector
            
            selected_organ = st.selectbox(
                label=get_text("select_organ"),
                options=organ_names_localized,
                index=default_index,
                key="organ_selector",
                on_change=on_organ_change
            )
    
    with organ_col2:
        if st.session_state.selected_organ and 'organ_visualizer' in st.session_state:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ—Ä–≥–∞–Ω–µ
            if 'diagnostic_data' in st.session_state.report_analysis:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ä–≥–∞–Ω–æ–≤, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if 'organ_detail_visualizer' not in st.session_state:
                    st.session_state.organ_detail_visualizer = OrganDetailVisualizer(st.session_state.language)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ—Ä–≥–∞–Ω–µ
                organ_details = st.session_state.organ_visualizer.get_organ_status_description(
                    st.session_state.selected_organ, 
                    st.session_state.report_analysis['diagnostic_data']
                )
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–≥–∞–Ω–∞
                status_colors = {
                    "healthy": "#E6CC33", # —Å–≤–µ—Ç–ª–æ-–∑–æ–ª–æ—Ç–æ–π
                    "inflamed": "#E63333", # –∫—Ä–∞—Å–Ω—ã–π
                    "weakened": "#999999", # —Å–µ—Ä—ã–π
                    "damaged": "#333333",  # —á–µ—Ä–Ω—ã–π
                    "no_data": "#CCCCCC"   # —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
                }
                
                status_color = status_colors.get(organ_details['status'], "#CCCCCC")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–µ
                st.subheader(get_text("organ_detail_header"))
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–≥–∞–Ω –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å
                st.markdown(
                    f"<div style='display: flex; align-items: center; margin-bottom: 15px;'>"
                    f"<div style='background-color: {status_color}; width: 20px; height: 20px; border-radius: 50%; margin-right: 10px;'></div>"
                    f"<span style='font-size: 1.2em;'><b>{organ_details['organ']}</b>: {organ_details['status_label']}</span>"
                    f"</div>",
                    unsafe_allow_html=True
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ä–≥–∞–Ω–∞
                if st.session_state.organ_detail_visualizer.has_detailed_image(organ_details['organ']):
                    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∞ —Å–æ —Å–≤–µ—á–µ–Ω–∏–µ–º
                    organ_detail_fig = st.session_state.organ_detail_visualizer.create_organ_detail_view(
                        organ_details['organ'], 
                        organ_details['status']
                    )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    st.markdown(f"**{get_text('organ_detail_image')}:**")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    st.pyplot(organ_detail_fig)
                else:
                    # –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ä–≥–∞–Ω–∞ –Ω–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    st.info(get_text('no_detailed_image'))
                    
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if organ_details['parameters']:
                    st.markdown(f"**{get_text('related_parameters')}:**")
                    for param in organ_details['parameters']:
                        status_text = get_text('normal') if param['status'] == 'normal' else get_text('abnormal')
                        min_norm, max_norm = param['normal_range']
                        
                        st.markdown(
                            f"- **{param['name']}**: {param['result']} ({min_norm} - {max_norm}), {status_text}"
                        )
                else:
                    st.info(get_text('no_data_organ'))
        else:
            st.info(get_text("select_organ"))

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ì–†–í —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

# Divider
st.markdown("---")

# Detailed information section
st.header(get_text("info_header"))
st.markdown(get_text("info_intro"))

# Get chakra names based on selected language
chakra_names = [chakra["name_ru"] if st.session_state.language == 'ru' else chakra["name"] for chakra in chakra_data]

# Create tabs for each chakra
chakra_tabs = st.tabs(chakra_names)

for i, tab in enumerate(chakra_tabs):
    chakra = chakra_data[i]
    with tab:
        col1, col2 = st.columns([1, 2])
        
        with col1:
            # Get chakra data based on language
            chakra_name_display = chakra['name_ru'] if st.session_state.language == 'ru' else chakra['name']
            sanskrit_name_display = chakra['sanskrit_name_ru'] if st.session_state.language == 'ru' else chakra['sanskrit_name']
            location_display = chakra['location_ru'] if st.session_state.language == 'ru' else chakra['location']
            
            energy_value = st.session_state.energy_values[chakra["name"]]
            chakra_color = utils.calculate_chakra_color(chakra["color_rgb"], energy_value/100)
            
            # Display chakra color and energy level
            st.markdown(f"""
            ### {chakra_name_display} ({sanskrit_name_display})
            **{get_text("location")}**: {location_display}
            
            **{get_text("current_energy")}**: {energy_value}%
            
            <div style='background: rgb({chakra_color[0]}, {chakra_color[1]}, {chakra_color[2]}); 
                        width: 100px; 
                        height: 100px; 
                        border-radius: 50%; 
                        margin: 20px auto;'></div>
            """, unsafe_allow_html=True)
        
        with col2:
            # Get chakra data based on language
            element_display = chakra['element_ru'] if st.session_state.language == 'ru' else chakra['element']
            associated_display = chakra['associated_with_ru'] if st.session_state.language == 'ru' else chakra['associated_with']
            balanced_display = chakra['balanced_qualities_ru'] if st.session_state.language == 'ru' else chakra['balanced_qualities']
            imbalanced_display = chakra['imbalanced_signs_ru'] if st.session_state.language == 'ru' else chakra['imbalanced_signs']
            healing_display = chakra['healing_practices_ru'] if st.session_state.language == 'ru' else chakra['healing_practices']
            
            st.markdown(f"""
            ### {get_text("element")}: {element_display}
            
            **{get_text("associated_with")}**: {associated_display}
            
            **{get_text("balanced_qualities")}**: {balanced_display}
            
            **{get_text("imbalanced_signs")}**: {imbalanced_display}
            
            **{get_text("healing_practices")}**: {healing_display}
            """)

# Footer
st.markdown("---")
st.markdown(get_text("footer"))
