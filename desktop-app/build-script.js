const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É Kirlian Platform Desktop...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Node.js –º–æ–¥—É–ª–µ–π
if (!fs.existsSync('./node_modules')) {
    console.log('üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...');
    execSync('npm install', { stdio: 'inherit' });
}

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É dist –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync('./dist')) {
    fs.mkdirSync('./dist');
}

// –°–±–æ—Ä–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
const platform = process.platform;

try {
    if (platform === 'win32') {
        console.log('ü™ü –°–±–æ—Ä–∫–∞ –¥–ª—è Windows...');
        execSync('npm run build-win', { stdio: 'inherit' });
        console.log('‚úÖ Windows –≤–µ—Ä—Å–∏—è —Å–æ–±—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    } else if (platform === 'darwin') {
        console.log('üçé –°–±–æ—Ä–∫–∞ –¥–ª—è Mac...');
        execSync('npm run build-mac', { stdio: 'inherit' });
        console.log('‚úÖ Mac –≤–µ—Ä—Å–∏—è —Å–æ–±—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    } else {
        console.log('üêß –°–±–æ—Ä–∫–∞ –¥–ª—è Linux...');
        execSync('npm run build', { stdio: 'inherit' });
        console.log('‚úÖ Linux –≤–µ—Ä—Å–∏—è —Å–æ–±—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
    console.log('\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:');
    const distFiles = fs.readdirSync('./dist');
    distFiles.forEach(file => {
        const filePath = path.join('./dist', file);
        const stats = fs.statSync(filePath);
        const sizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
        console.log(`   ${file} (${sizeInMB} MB)`);
    });
    
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ:', error.message);
    process.exit(1);
}